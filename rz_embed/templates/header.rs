//
//  Generated by rz-embed
//

use flate2::read::GzDecoder;
use lazy_static::lazy_static;
use rocket::http::ContentType;
use rocket::response::content::RawCss;
use rocket::response::content::RawHtml;
use rocket::response::content::RawJavaScript;
use rocket::response::content::RawJson;
use rocket::response::Responder;
use rocket::response::Response;
use rocket::Request;
use rocket::Route;
use std::io::Cursor;
use std::io::Read;

pub struct BinaryResponse(&'static [u8], ContentType);

impl<'r> Responder<'r, 'static> for BinaryResponse {
    fn respond_to(self, _: &'r Request<'_>) -> rocket::response::Result<'static> {
        Response::build()
            .header(self.1)
            .sized_body(self.0.len(), Cursor::new(self.0))
            .ok()
    }
}

/* embed */

/* route_handlers */

pub fn routes() -> Vec<Route> {
    routes![/* route_list */]
}
